[{"D:\\HP\\JS\\project\\Todolist_\\src\\index.tsx":"1","D:\\HP\\JS\\project\\Todolist_\\src\\reportWebVitals.ts":"2","D:\\HP\\JS\\project\\Todolist_\\src\\app\\store.ts":"3","D:\\HP\\JS\\project\\Todolist_\\src\\app\\App.tsx":"4","D:\\HP\\JS\\project\\Todolist_\\src\\features\\TodolistsList\\tasks-reducer.ts":"5","D:\\HP\\JS\\project\\Todolist_\\src\\features\\TodolistsList\\todolists-reducer.ts":"6","D:\\HP\\JS\\project\\Todolist_\\src\\features\\TodolistsList\\TodolistsList.tsx":"7","D:\\HP\\JS\\project\\Todolist_\\src\\api\\todolists-api.ts":"8","D:\\HP\\JS\\project\\Todolist_\\src\\components\\AddItemForm\\AddItemForm.tsx":"9","D:\\HP\\JS\\project\\Todolist_\\src\\features\\TodolistsList\\Todolist\\Todolist.tsx":"10","D:\\HP\\JS\\project\\Todolist_\\src\\features\\TodolistsList\\Todolist\\Task\\Task.tsx":"11","D:\\HP\\JS\\project\\Todolist_\\src\\components\\EditableSpan\\EditableSpan.tsx":"12","D:\\HP\\JS\\project\\Todolist_\\src\\features\\TodolistsList\\Todolist\\TodoList.tsx":"13","D:\\HP\\JS\\project\\Todolist_\\src\\app\\app-reducer.ts":"14","D:\\HP\\JS\\project\\Todolist_\\src\\components\\ErrorSnackbar\\ErrorSnackbar.tsx":"15","D:\\HP\\JS\\project\\Todolist_\\src\\utils\\error-utils.ts":"16"},{"size":664,"mtime":1643086402787,"results":"17","hashOfConfig":"18"},{"size":440,"mtime":1643086402787,"results":"19","hashOfConfig":"18"},{"size":1100,"mtime":1643782584076,"results":"20","hashOfConfig":"18"},{"size":1420,"mtime":1644467501761,"results":"21","hashOfConfig":"18"},{"size":5836,"mtime":1644492747811,"results":"22","hashOfConfig":"18"},{"size":4870,"mtime":1644492790999,"results":"23","hashOfConfig":"18"},{"size":3702,"mtime":1644476201174,"results":"24","hashOfConfig":"18"},{"size":2582,"mtime":1643086402771,"results":"25","hashOfConfig":"18"},{"size":1629,"mtime":1644477216308,"results":"26","hashOfConfig":"18"},{"size":3949,"mtime":1643112242880,"results":"27","hashOfConfig":"18"},{"size":1826,"mtime":1643113897923,"results":"28","hashOfConfig":"18"},{"size":952,"mtime":1643086402771,"results":"29","hashOfConfig":"18"},{"size":4315,"mtime":1644476786680,"results":"30","hashOfConfig":"18"},{"size":1098,"mtime":1644467501763,"results":"31","hashOfConfig":"18"},{"size":1065,"mtime":1644467501764,"results":"32","hashOfConfig":"18"},{"size":837,"mtime":1644488265349,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"a090iu",{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"36"},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48"},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"36"},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"36"},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"60"},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"36"},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"36"},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"36"},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"D:\\HP\\JS\\project\\Todolist_\\src\\index.tsx",[],["76","77"],"D:\\HP\\JS\\project\\Todolist_\\src\\reportWebVitals.ts",[],"D:\\HP\\JS\\project\\Todolist_\\src\\app\\store.ts",[],"D:\\HP\\JS\\project\\Todolist_\\src\\app\\App.tsx",["78"],"import React from 'react'\r\nimport './App.css'\r\nimport { AppBar, Container, IconButton, Toolbar, Typography, LinearProgress } from '@material-ui/core'\r\nimport { Menu } from '@material-ui/icons'\r\nimport { TodolistsList } from '../features/TodolistsList/TodolistsList'\r\nimport Button from '@mui/material/Button';\r\nimport { AppRootStateType } from './store';\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { ErrorSnackbar } from '../components/ErrorSnackbar/ErrorSnackbar'\r\nimport { RequestStatusType } from './app-reducer'\r\n\r\nfunction App() {\r\n\r\n    const status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\r\n    \r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackbar />\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"secondary\" aria-label=\"menu\">\r\n                        <Menu />\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    <Button variant=\"contained\" color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n                {status === 'loading' && <LinearProgress color=\"secondary\" />}\r\n            </AppBar>\r\n            <Container fixed>\r\n                <TodolistsList />\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","D:\\HP\\JS\\project\\Todolist_\\src\\features\\TodolistsList\\tasks-reducer.ts",["79"],"D:\\HP\\JS\\project\\Todolist_\\src\\features\\TodolistsList\\todolists-reducer.ts",["80"],"import { todolistsAPI, TodolistType } from '../../api/todolists-api'\r\nimport { Dispatch } from 'redux'\r\nimport { setAppStatusAC, SetAppStatusActionType, RequestStatusType, setAppErrorAC, SetAppErrorActionType } from './../../app/app-reducer'\r\nimport { handleServerAppError, handleServerNetworkError } from '../../utils/error-utils'\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id !== action.id)\r\n        case 'ADD-TODOLIST':\r\n            return [{ ...action.todolist, filter: 'all', entityStatus: 'idle' }, ...state]\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(tl => tl.id === action.id ? { ...tl, title: action.title } : tl)\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return state.map(tl => tl.id === action.id ? { ...tl, filter: action.filter } : tl)\r\n        case 'SET-TODOLISTS':\r\n            return action.todolists.map(tl => ({ ...tl, filter: 'all', entityStatus: 'idle' }))\r\n        case 'CHANGE-TODOLIST-ENTITY-STATUS':\r\n            return state.map(tl => tl.id === action.id ? { ...tl, entityStatus: action.entityStatus } : tl)\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTodolistAC = (id: string) => ({ type: 'REMOVE-TODOLIST', id } as const)\r\nexport const addTodolistAC = (todolist: TodolistType) => ({ type: 'ADD-TODOLIST', todolist } as const)\r\nexport const changeTodolistTitleAC = (id: string, title: string) => ({\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    id,\r\n    title\r\n} as const)\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType) => ({\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    id,\r\n    filter\r\n} as const)\r\nexport const setTodolistsAC = (todolists: Array<TodolistType>) => ({ type: 'SET-TODOLISTS', todolists } as const)\r\nexport const changeTodolistEntityStatusAC = (id: string, entityStatus: RequestStatusType) => ({\r\n    type: 'CHANGE-TODOLIST-ENTITY-STATUS',\r\n    id,\r\n    entityStatus\r\n} as const)\r\n\r\n// thunks\r\nexport const fetchTodolistsTC = () => {\r\n    return (dispatch: Dispatch<ActionsType>) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.getTodolists()\r\n            .then((res) => {\r\n                dispatch(setTodolistsAC(res.data))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\nexport const removeTodolistTC = (todolistId: string) => {\r\n    return (dispatch: Dispatch<ActionsType>) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        dispatch(changeTodolistEntityStatusAC(todolistId, 'loading'))\r\n        todolistsAPI.deleteTodolist(todolistId)\r\n            .then((res) => {\r\n                dispatch(removeTodolistAC(todolistId))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\nexport const addTodolistTC = (title: string) => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.createTodolist(title)\r\n            .then((res) => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(addTodolistAC(res.data.data.item))\r\n                    dispatch(setAppStatusAC('succeeded'))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            }).catch((error) => {\r\n                handleServerNetworkError(error, dispatch)\r\n            })\r\n    }\r\n}\r\nexport const changeTodolistTitleTC = (id: string, title: string) => {\r\n    return (dispatch: Dispatch<ActionsType>) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.updateTodolist(id, title)\r\n            .then((res) => {\r\n                dispatch(changeTodolistTitleAC(id, title))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\n\r\n// types\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>;\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>;\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>;\r\nexport type ChangeTodolistEntityStatusActionType = ReturnType<typeof changeTodolistEntityStatusAC>\r\n\r\ntype ActionsType =\r\n    | RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ReturnType<typeof changeTodolistTitleAC>\r\n    | ReturnType<typeof changeTodolistFilterAC>\r\n    | SetTodolistsActionType\r\n    | SetAppStatusActionType\r\n    | ChangeTodolistEntityStatusActionType\r\n\r\ntype ThunkDispatch = Dispatch<ActionsType | SetAppErrorActionType | SetAppStatusActionType>\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\n","D:\\HP\\JS\\project\\Todolist_\\src\\features\\TodolistsList\\TodolistsList.tsx",["81","82","83","84","85","86","87","88"],"import React, {useCallback, useEffect} from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from './todolists-reducer'\r\nimport {addTaskTC, removeTaskTC, TasksStateType, updateTaskTC} from './tasks-reducer'\r\nimport {TaskStatuses} from '../../api/todolists-api'\r\nimport {Grid, Paper} from '@material-ui/core'\r\nimport {AddItemForm} from '../../components/AddItemForm/AddItemForm'\r\nimport { Todolist } from './Todolist/TodoList'\r\n\r\n\r\nexport const TodolistsList: React.FC = () => {\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        const thunk = fetchTodolistsTC()\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        const thunk = removeTaskTC(id, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        const thunk = addTaskTC(title, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {status}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {title: newTitle}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC(todolistId, value)\r\n        dispatch(action)\r\n    }, [])\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const thunk = removeTodolistTC(id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const thunk = changeTodolistTitleTC(id, title)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const thunk = addTodolistTC(title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: '10px'}}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                                entityStatus={tl.entityStatus}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","D:\\HP\\JS\\project\\Todolist_\\src\\api\\todolists-api.ts",[],"D:\\HP\\JS\\project\\Todolist_\\src\\components\\AddItemForm\\AddItemForm.tsx",["89","90","91"],"import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {Box, Button, FormControl, IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function({addItem, disabled = false }: AddItemFormPropsType) {\r\n    console.log(\"AddItemForm called\")\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== \"\") {\r\n            addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItemHandler();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n                   size=\"small\"\r\n                   disabled={disabled}\r\n        />\r\n        <IconButton color=\"default\" onClick={addItemHandler} disabled={disabled}>\r\n            <AddBox />\r\n        </IconButton>\r\n    </div>\r\n})\r\n","D:\\HP\\JS\\project\\Todolist_\\src\\features\\TodolistsList\\Todolist\\Todolist.tsx",["92","93","94","95","96","97","98"],"import React, { useCallback, useEffect } from 'react'\r\nimport { AddItemForm } from '../../../components/AddItemForm/AddItemForm'\r\nimport { EditableSpan } from '../../../components/EditableSpan/EditableSpan'\r\nimport { IconButton } from '@material-ui/core'\r\nimport Button from '@mui/material/Button';\r\nimport { Delete } from '@material-ui/icons'\r\nimport { Task } from './Task/Task'\r\nimport { TaskStatuses, TaskType } from '../../../api/todolists-api'\r\nimport { FilterValuesType } from '../todolists-reducer'\r\nimport { useDispatch } from 'react-redux'\r\nimport { fetchTasksTC } from '../tasks-reducer'\r\nimport PlaylistRemoveIcon from '@mui/icons-material/PlaylistRemove';\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    filter: FilterValuesType\r\n\r\n}\r\n\r\nexport const Todolist = React.memo(function (props: PropsType) {\r\n    console.log('Todolist called')\r\n\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        const thunk = fetchTasksTC(props.id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.id)\r\n    }, [props.addTask, props.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.id, title)\r\n    }, [props.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.id), [props.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.id), [props.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.id), [props.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.title} onChange={changeTodolistTitle} />\r\n            <IconButton onClick={removeTodolist}>\r\n                <PlaylistRemoveIcon />\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} />\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.id}\r\n                    removeTask={props.removeTask}\r\n                    changeTaskTitle={props.changeTaskTitle}\r\n                    changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{ paddingTop: '10px' }}>\r\n            <Button variant={props.filter === 'all' ? 'outlined' : 'text'}\r\n                onClick={onAllClickHandler}\r\n                color={'inherit'}\r\n                size=\"small\">All\r\n            </Button>\r\n            <Button variant={props.filter === 'active' ? 'outlined' : 'text'}\r\n                onClick={onActiveClickHandler}\r\n                color={'primary'}\r\n                size=\"small\">Active\r\n            </Button>\r\n            <Button variant={props.filter === 'completed' ? 'outlined' : 'text'}\r\n                onClick={onCompletedClickHandler}\r\n                color={'secondary'}\r\n                size=\"small\">Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n",["99","100"],"D:\\HP\\JS\\project\\Todolist_\\src\\features\\TodolistsList\\Todolist\\Task\\Task.tsx",["101","102","103"],"import React, {ChangeEvent, useCallback} from 'react'\r\nimport {IconButton} from '@material-ui/core'\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"secondary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler} size=\"small\">\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","D:\\HP\\JS\\project\\Todolist_\\src\\components\\EditableSpan\\EditableSpan.tsx",[],"D:\\HP\\JS\\project\\Todolist_\\src\\features\\TodolistsList\\Todolist\\TodoList.tsx",["104","105","106","107","108","109","110"],"import React, { useCallback, useEffect } from 'react'\r\nimport { AddItemForm } from '../../../components/AddItemForm/AddItemForm'\r\nimport { EditableSpan } from '../../../components/EditableSpan/EditableSpan'\r\nimport { IconButton } from '@material-ui/core'\r\nimport Button from '@mui/material/Button';\r\nimport { Delete } from '@material-ui/icons'\r\nimport { Task } from './Task/Task'\r\nimport { TaskStatuses, TaskType } from '../../../api/todolists-api'\r\nimport { FilterValuesType, TodolistDomainType } from '../todolists-reducer'\r\nimport { useDispatch } from 'react-redux'\r\nimport { fetchTasksTC } from '../tasks-reducer'\r\nimport PlaylistRemoveIcon from '@mui/icons-material/PlaylistRemove';\r\nimport { RequestStatusType } from '../../../app/app-reducer';\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    entityStatus: RequestStatusType\r\n\r\n}\r\n\r\nexport const Todolist = React.memo(function (props: PropsType) {\r\n    console.log('Todolist called')\r\n\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        const thunk = fetchTasksTC(props.todolist.id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.todolist.id)\r\n    }, [props.addTask, props.todolist.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.todolist.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.todolist.id, title)\r\n    }, [props.todolist.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.todolist.title} onChange={changeTodolistTitle} />\r\n            <IconButton onClick={removeTodolist} disabled={props.todolist.entityStatus === 'loading'}>\r\n                <PlaylistRemoveIcon />\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus === 'loading'} />\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.todolist.id}\r\n                    removeTask={props.removeTask}\r\n                    changeTaskTitle={props.changeTaskTitle}\r\n                    changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{ paddingTop: '10px' }}>\r\n            <Button variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                onClick={onAllClickHandler}\r\n                color={'inherit'}\r\n                size=\"small\">All\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                onClick={onActiveClickHandler}\r\n                color={'primary'}\r\n                size=\"small\">Active\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                onClick={onCompletedClickHandler}\r\n                color={'secondary'}\r\n                size=\"small\">Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","D:\\HP\\JS\\project\\Todolist_\\src\\app\\app-reducer.ts",[],"D:\\HP\\JS\\project\\Todolist_\\src\\components\\ErrorSnackbar\\ErrorSnackbar.tsx",["111","112"],"import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, { AlertProps } from '@material-ui/lab/Alert'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { AppRootStateType } from './../../app/store'\r\nimport { setAppErrorAC } from './../../app/app-reducer'\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n    const [open, setOpen] = React.useState(true)\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        dispatch(setAppErrorAC(null))\r\n    }\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={3000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\" >\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}","D:\\HP\\JS\\project\\Todolist_\\src\\utils\\error-utils.ts",[],{"ruleId":"113","replacedBy":"114"},{"ruleId":"115","replacedBy":"116"},{"ruleId":"117","severity":1,"message":"118","line":8,"column":10,"nodeType":"119","messageId":"120","endLine":8,"endColumn":21},{"ruleId":"117","severity":1,"message":"121","line":5,"column":26,"nodeType":"119","messageId":"120","endLine":5,"endColumn":39},{"ruleId":"117","severity":1,"message":"121","line":3,"column":69,"nodeType":"119","messageId":"120","endLine":3,"endColumn":82},{"ruleId":"122","severity":1,"message":"123","line":28,"column":8,"nodeType":"124","endLine":28,"endColumn":10,"suggestions":"125"},{"ruleId":"122","severity":1,"message":"126","line":33,"column":8,"nodeType":"124","endLine":33,"endColumn":10,"suggestions":"127"},{"ruleId":"122","severity":1,"message":"126","line":38,"column":8,"nodeType":"124","endLine":38,"endColumn":10,"suggestions":"128"},{"ruleId":"122","severity":1,"message":"126","line":43,"column":8,"nodeType":"124","endLine":43,"endColumn":10,"suggestions":"129"},{"ruleId":"122","severity":1,"message":"126","line":48,"column":8,"nodeType":"124","endLine":48,"endColumn":10,"suggestions":"130"},{"ruleId":"122","severity":1,"message":"126","line":53,"column":8,"nodeType":"124","endLine":53,"endColumn":10,"suggestions":"131"},{"ruleId":"122","severity":1,"message":"126","line":58,"column":8,"nodeType":"124","endLine":58,"endColumn":10,"suggestions":"132"},{"ruleId":"122","severity":1,"message":"126","line":63,"column":8,"nodeType":"124","endLine":63,"endColumn":10,"suggestions":"133"},{"ruleId":"117","severity":1,"message":"134","line":2,"column":9,"nodeType":"119","messageId":"120","endLine":2,"endColumn":12},{"ruleId":"117","severity":1,"message":"135","line":2,"column":14,"nodeType":"119","messageId":"120","endLine":2,"endColumn":20},{"ruleId":"117","severity":1,"message":"136","line":2,"column":22,"nodeType":"119","messageId":"120","endLine":2,"endColumn":33},{"ruleId":"117","severity":1,"message":"137","line":6,"column":10,"nodeType":"119","messageId":"120","endLine":6,"endColumn":16},{"ruleId":"122","severity":1,"message":"138","line":36,"column":8,"nodeType":"124","endLine":36,"endColumn":10,"suggestions":"139"},{"ruleId":"122","severity":1,"message":"140","line":40,"column":8,"nodeType":"124","endLine":40,"endColumn":33,"suggestions":"141"},{"ruleId":"122","severity":1,"message":"140","line":47,"column":8,"nodeType":"124","endLine":47,"endColumn":45,"suggestions":"142"},{"ruleId":"122","severity":1,"message":"140","line":49,"column":86,"nodeType":"124","endLine":49,"endColumn":116,"suggestions":"143"},{"ruleId":"122","severity":1,"message":"140","line":50,"column":92,"nodeType":"124","endLine":50,"endColumn":122,"suggestions":"144"},{"ruleId":"122","severity":1,"message":"140","line":51,"column":98,"nodeType":"124","endLine":51,"endColumn":128,"suggestions":"145"},{"ruleId":"113","replacedBy":"146"},{"ruleId":"115","replacedBy":"147"},{"ruleId":"122","severity":1,"message":"140","line":16,"column":97,"nodeType":"124","endLine":16,"endColumn":130,"suggestions":"148"},{"ruleId":"122","severity":1,"message":"140","line":21,"column":8,"nodeType":"124","endLine":21,"endColumn":41,"suggestions":"149"},{"ruleId":"122","severity":1,"message":"140","line":25,"column":8,"nodeType":"124","endLine":25,"endColumn":41,"suggestions":"150"},{"ruleId":"117","severity":1,"message":"137","line":6,"column":10,"nodeType":"119","messageId":"120","endLine":6,"endColumn":16},{"ruleId":"122","severity":1,"message":"151","line":36,"column":8,"nodeType":"124","endLine":36,"endColumn":10,"suggestions":"152"},{"ruleId":"122","severity":1,"message":"140","line":40,"column":8,"nodeType":"124","endLine":40,"endColumn":42,"suggestions":"153"},{"ruleId":"122","severity":1,"message":"140","line":47,"column":8,"nodeType":"124","endLine":47,"endColumn":54,"suggestions":"154"},{"ruleId":"122","severity":1,"message":"140","line":49,"column":95,"nodeType":"124","endLine":49,"endColumn":134,"suggestions":"155"},{"ruleId":"122","severity":1,"message":"140","line":50,"column":101,"nodeType":"124","endLine":50,"endColumn":140,"suggestions":"156"},{"ruleId":"122","severity":1,"message":"140","line":51,"column":107,"nodeType":"124","endLine":51,"endColumn":146,"suggestions":"157"},{"ruleId":"117","severity":1,"message":"158","line":13,"column":12,"nodeType":"119","messageId":"120","endLine":13,"endColumn":16},{"ruleId":"117","severity":1,"message":"159","line":13,"column":18,"nodeType":"119","messageId":"120","endLine":13,"endColumn":25},"no-native-reassign",["160"],"no-negated-in-lhs",["161"],"@typescript-eslint/no-unused-vars","'useDispatch' is defined but never used.","Identifier","unusedVar","'setAppErrorAC' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["162"],"React Hook useCallback has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["163"],["164"],["165"],["166"],["167"],["168"],["169"],"'Box' is defined but never used.","'Button' is defined but never used.","'FormControl' is defined but never used.","'Delete' is defined but never used.","React Hook useEffect has missing dependencies: 'dispatch' and 'props.id'. Either include them or remove the dependency array.",["170"],"React Hook useCallback has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useCallback call and refer to those specific props inside useCallback.",["171"],["172"],["173"],["174"],["175"],["160"],["161"],["176"],["177"],["178"],"React Hook useEffect has missing dependencies: 'dispatch' and 'props.todolist.id'. Either include them or remove the dependency array.",["179"],["180"],["181"],["182"],["183"],["184"],"'open' is assigned a value but never used.","'setOpen' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"185","fix":"186"},{"desc":"185","fix":"187"},{"desc":"185","fix":"188"},{"desc":"185","fix":"189"},{"desc":"185","fix":"190"},{"desc":"185","fix":"191"},{"desc":"185","fix":"192"},{"desc":"185","fix":"193"},{"desc":"194","fix":"195"},{"desc":"196","fix":"197"},{"desc":"196","fix":"198"},{"desc":"196","fix":"199"},{"desc":"196","fix":"200"},{"desc":"196","fix":"201"},{"desc":"196","fix":"202"},{"desc":"196","fix":"203"},{"desc":"196","fix":"204"},{"desc":"205","fix":"206"},{"desc":"196","fix":"207"},{"desc":"196","fix":"208"},{"desc":"196","fix":"209"},{"desc":"196","fix":"210"},{"desc":"196","fix":"211"},"Update the dependencies array to be: [dispatch]",{"range":"212","text":"213"},{"range":"214","text":"213"},{"range":"215","text":"213"},{"range":"216","text":"213"},{"range":"217","text":"213"},{"range":"218","text":"213"},{"range":"219","text":"213"},{"range":"220","text":"213"},"Update the dependencies array to be: [dispatch, props.id]",{"range":"221","text":"222"},"Update the dependencies array to be: [props]",{"range":"223","text":"224"},{"range":"225","text":"224"},{"range":"226","text":"224"},{"range":"227","text":"224"},{"range":"228","text":"224"},{"range":"229","text":"224"},{"range":"230","text":"224"},{"range":"231","text":"224"},"Update the dependencies array to be: [dispatch, props.todolist.id]",{"range":"232","text":"233"},{"range":"234","text":"224"},{"range":"235","text":"224"},{"range":"236","text":"224"},{"range":"237","text":"224"},{"range":"238","text":"224"},[1053,1055],"[dispatch]",[1224,1226],[1395,1397],[1600,1602],[1813,1815],[2014,2016],[2161,2163],[2340,2342],[1503,1505],"[dispatch, props.id]",[1611,1636],"[props]",[1849,1886],[1976,2006],[2100,2130],[2230,2260],[803,836],[1109,1142],[1299,1332],[1601,1603],"[dispatch, props.todolist.id]",[1718,1752],[1983,2029],[2128,2167],[2270,2309],[2418,2457]]