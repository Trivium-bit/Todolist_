[{"D:\\HP\\JS\\project\\Todolist_\\src\\index.tsx":"1","D:\\HP\\JS\\project\\Todolist_\\src\\reportWebVitals.ts":"2","D:\\HP\\JS\\project\\Todolist_\\src\\app\\store.ts":"3","D:\\HP\\JS\\project\\Todolist_\\src\\app\\App.tsx":"4","D:\\HP\\JS\\project\\Todolist_\\src\\features\\TodolistsList\\tasks-reducer.ts":"5","D:\\HP\\JS\\project\\Todolist_\\src\\features\\TodolistsList\\todolists-reducer.ts":"6","D:\\HP\\JS\\project\\Todolist_\\src\\features\\TodolistsList\\TodolistsList.tsx":"7","D:\\HP\\JS\\project\\Todolist_\\src\\api\\todolists-api.ts":"8","D:\\HP\\JS\\project\\Todolist_\\src\\components\\AddItemForm\\AddItemForm.tsx":"9","D:\\HP\\JS\\project\\Todolist_\\src\\features\\TodolistsList\\Todolist\\Todolist.tsx":"10","D:\\HP\\JS\\project\\Todolist_\\src\\features\\TodolistsList\\Todolist\\Task\\Task.tsx":"11","D:\\HP\\JS\\project\\Todolist_\\src\\components\\EditableSpan\\EditableSpan.tsx":"12","D:\\HP\\JS\\project\\Todolist_\\src\\features\\TodolistsList\\Todolist\\TodoList.tsx":"13","D:\\HP\\JS\\project\\Todolist_\\src\\app\\app-reducer.ts":"14","D:\\HP\\JS\\project\\Todolist_\\src\\components\\ErrorSnackbar\\ErrorSnackbar.tsx":"15","D:\\HP\\JS\\project\\Todolist_\\src\\utils\\error-utils.ts":"16","D:\\HP\\JS\\project\\Todolist_\\src\\features\\login\\Login.tsx":"17","D:\\HP\\JS\\project\\Todolist_\\src\\features\\login\\auth-reducer.ts":"18"},{"size":664,"mtime":1643086402787,"results":"19","hashOfConfig":"20"},{"size":440,"mtime":1643086402787,"results":"21","hashOfConfig":"20"},{"size":1187,"mtime":1644926566875,"results":"22","hashOfConfig":"20"},{"size":1989,"mtime":1644639909639,"results":"23","hashOfConfig":"20"},{"size":6086,"mtime":1644639909763,"results":"24","hashOfConfig":"20"},{"size":5460,"mtime":1644639909801,"results":"25","hashOfConfig":"20"},{"size":3913,"mtime":1644988441215,"results":"26","hashOfConfig":"20"},{"size":3021,"mtime":1644920939667,"results":"27","hashOfConfig":"20"},{"size":1629,"mtime":1644639909699,"results":"28","hashOfConfig":"20"},{"size":3949,"mtime":1643112242880,"results":"29","hashOfConfig":"20"},{"size":1826,"mtime":1643113897923,"results":"30","hashOfConfig":"20"},{"size":952,"mtime":1643086402771,"results":"31","hashOfConfig":"20"},{"size":4315,"mtime":1644639909719,"results":"32","hashOfConfig":"20"},{"size":1098,"mtime":1644639909675,"results":"33","hashOfConfig":"20"},{"size":1065,"mtime":1644639909705,"results":"34","hashOfConfig":"20"},{"size":824,"mtime":1644925223736,"results":"35","hashOfConfig":"20"},{"size":3793,"mtime":1644988421582,"results":"36","hashOfConfig":"20"},{"size":1477,"mtime":1644925333394,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"a090iu",{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47"},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50"},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60"},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"64"},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"40"},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72"},{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77"},{"filePath":"78","messages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"82","messages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84"},"D:\\HP\\JS\\project\\Todolist_\\src\\index.tsx",[],["85","86"],"D:\\HP\\JS\\project\\Todolist_\\src\\reportWebVitals.ts",[],"D:\\HP\\JS\\project\\Todolist_\\src\\app\\store.ts",[],"D:\\HP\\JS\\project\\Todolist_\\src\\app\\App.tsx",["87"],"import React from 'react'\r\nimport './App.css'\r\nimport { AppBar, Container, IconButton, Toolbar, Typography, LinearProgress } from '@material-ui/core'\r\nimport { Menu } from '@material-ui/icons'\r\nimport { TodolistsList } from '../features/TodolistsList/TodolistsList'\r\nimport Button from '@mui/material/Button';\r\nimport { AppRootStateType } from './store';\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { ErrorSnackbar } from '../components/ErrorSnackbar/ErrorSnackbar'\r\nimport { RequestStatusType } from './app-reducer'\r\nimport { Login } from '../features/login/Login'\r\nimport { BrowserRouter, Navigate, Route, Routes } from 'react-router-dom'\r\n\r\n\r\nfunction App() {\r\n\r\n    const status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\r\n\r\n    return (\r\n        <BrowserRouter>\r\n            <div className=\"App\">\r\n                <ErrorSnackbar />\r\n                <AppBar position=\"static\">\r\n                    <Toolbar>\r\n                        <IconButton edge=\"start\" color=\"secondary\" aria-label=\"menu\">\r\n                            <Menu />\r\n                        </IconButton>\r\n                        <Typography variant=\"h6\">\r\n                            News\r\n                        </Typography>\r\n                        <Button variant=\"contained\" color=\"inherit\">Login</Button>\r\n                    </Toolbar>\r\n                    {status === 'loading' && <LinearProgress color=\"secondary\" />}\r\n                </AppBar>\r\n                <Container fixed>\r\n                    <Routes>\r\n                        <Route path=\"/\" element={<TodolistsList />} />\r\n                        <Route path=\"login\" element={<Login />} />\r\n                        <Route path=\"404\" element={<h1>404: PAGE NOT FOUND</h1>} />\r\n                        <Route path=\"*\" element={<Navigate to=\"/404\" />} />\r\n                    </Routes>\r\n                </Container>\r\n            </div>\r\n        </BrowserRouter>\r\n    )\r\n}\r\n\r\nexport default App\r\n","D:\\HP\\JS\\project\\Todolist_\\src\\features\\TodolistsList\\tasks-reducer.ts",["88"],"import { AddTodolistActionType, RemoveTodolistActionType, SetTodolistsActionType } from './todolists-reducer'\r\nimport { TaskPriorities, TaskStatuses, TaskType, todolistsAPI, UpdateTaskModelType } from '../../api/todolists-api'\r\nimport { Dispatch } from 'redux'\r\nimport { AppRootStateType } from '../../app/store'\r\nimport { setAppStatusAC, setAppErrorAC, SetAppStatusActionType, SetAppErrorActionType } from '../../app/app-reducer'\r\nimport { handleServerAppError, handleServerNetworkError } from '../../utils/error-utils'\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK':\r\n            return { ...state, [action.todolistId]: state[action.todolistId].filter(t => t.id !== action.taskId) }\r\n        case 'ADD-TASK':\r\n            return { ...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]] }\r\n        case 'UPDATE-TASK':\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId]\r\n                    .map(t => t.id === action.taskId ? { ...t, ...action.model } : t)\r\n            }\r\n        case 'ADD-TODOLIST':\r\n            return { ...state, [action.todolist.id]: [] }\r\n        case 'REMOVE-TODOLIST':\r\n            const copyState = { ...state }\r\n            delete copyState[action.id]\r\n            return copyState\r\n        case 'SET-TODOLISTS': {\r\n            const copyState = { ...state }\r\n            action.todolists.forEach(tl => {\r\n                copyState[tl.id] = []\r\n            })\r\n            return copyState\r\n        }\r\n        case 'SET-TASKS':\r\n            return { ...state, [action.todolistId]: action.tasks }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTaskAC = (taskId: string, todolistId: string) =>\r\n    ({ type: 'REMOVE-TASK', taskId, todolistId } as const)\r\nexport const addTaskAC = (task: TaskType) =>\r\n    ({ type: 'ADD-TASK', task } as const)\r\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) =>\r\n    ({ type: 'UPDATE-TASK', model, todolistId, taskId } as const)\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) =>\r\n    ({ type: 'SET-TASKS', tasks, todolistId } as const)\r\n\r\n// thunks\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: ThunkDispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.getTasks(todolistId)\r\n        .then((res) => {\r\n            const tasks = res.data.items\r\n            dispatch(setTasksAC(tasks, todolistId))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        }).catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: ThunkDispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.deleteTask(todolistId, taskId)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n            dispatch(removeTaskAC(taskId, todolistId))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        }).catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const addTaskTC = (title: string, todolistId: string) => (dispatch: Dispatch<ActionsType | SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.createTask(todolistId, title)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                const task = res.data.data.item\r\n                dispatch(addTaskAC(task))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        }).catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) =>\r\n    (dispatch: ThunkDispatch, getState: () => AppRootStateType) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        dispatch(setAppStatusAC('succeeded'))\r\n        if (!task) {\r\n            //throw new Error(\"task not found in the state\");\r\n            console.warn('task not found in the state')\r\n            return\r\n        }\r\n\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n            ...domainModel\r\n        }\r\n\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(updateTaskAC(taskId, domainModel, todolistId))\r\n                    dispatch(setAppStatusAC('succeeded'))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            }).catch((error) => {\r\n                handleServerNetworkError(error, dispatch)\r\n            })\r\n    }\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\ntype ActionsType =\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof setTasksAC>\r\n\r\ntype ThunkDispatch = Dispatch<ActionsType | SetAppErrorActionType | SetAppStatusActionType>\r\n","D:\\HP\\JS\\project\\Todolist_\\src\\features\\TodolistsList\\todolists-reducer.ts",["89"],"import { todolistsAPI, TodolistType } from '../../api/todolists-api'\r\nimport { Dispatch } from 'redux'\r\nimport { setAppStatusAC, SetAppStatusActionType, RequestStatusType, setAppErrorAC, SetAppErrorActionType } from './../../app/app-reducer'\r\nimport { handleServerAppError, handleServerNetworkError } from '../../utils/error-utils'\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id !== action.id)\r\n        case 'ADD-TODOLIST':\r\n            return [{ ...action.todolist, filter: 'all', entityStatus: 'idle' }, ...state]\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(tl => tl.id === action.id ? { ...tl, title: action.title } : tl)\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return state.map(tl => tl.id === action.id ? { ...tl, filter: action.filter } : tl)\r\n        case 'SET-TODOLISTS':\r\n            return action.todolists.map(tl => ({ ...tl, filter: 'all', entityStatus: 'idle' }))\r\n        case 'CHANGE-TODOLIST-ENTITY-STATUS':\r\n            return state.map(tl => tl.id === action.id ? { ...tl, entityStatus: action.entityStatus } : tl)\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTodolistAC = (id: string) => ({ type: 'REMOVE-TODOLIST', id } as const)\r\nexport const addTodolistAC = (todolist: TodolistType) => ({ type: 'ADD-TODOLIST', todolist } as const)\r\nexport const changeTodolistTitleAC = (id: string, title: string) => ({\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    id,\r\n    title\r\n} as const)\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType) => ({\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    id,\r\n    filter\r\n} as const)\r\nexport const setTodolistsAC = (todolists: Array<TodolistType>) => ({ type: 'SET-TODOLISTS', todolists } as const)\r\nexport const changeTodolistEntityStatusAC = (id: string, entityStatus: RequestStatusType) => ({\r\n    type: 'CHANGE-TODOLIST-ENTITY-STATUS',\r\n    id,\r\n    entityStatus\r\n} as const)\r\n\r\n// thunks\r\nexport const fetchTodolistsTC = () => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.getTodolists()\r\n            .then((res) => {\r\n                dispatch(setTodolistsAC(res.data))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            }).catch((error) => {\r\n                handleServerNetworkError(error, dispatch)\r\n            })\r\n    }\r\n}\r\nexport const removeTodolistTC = (todolistId: string) => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        dispatch(changeTodolistEntityStatusAC(todolistId, 'loading'))\r\n        todolistsAPI.deleteTodolist(todolistId)\r\n            .then((res) => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(removeTodolistAC(todolistId))\r\n                    dispatch(setAppStatusAC('succeeded'))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            }).catch((error) => {\r\n                handleServerNetworkError(error, dispatch)\r\n            })\r\n    }\r\n}\r\nexport const addTodolistTC = (title: string) => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.createTodolist(title)\r\n            .then((res) => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(addTodolistAC(res.data.data.item))\r\n                    dispatch(setAppStatusAC('succeeded'))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            }).catch((error) => {\r\n                handleServerNetworkError(error, dispatch)\r\n            })\r\n    }\r\n}\r\nexport const changeTodolistTitleTC = (id: string, title: string) => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.updateTodolist(id, title)\r\n            .then((res) => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(changeTodolistTitleAC(id, title))\r\n                    dispatch(setAppStatusAC('succeeded'))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            }).catch((error) => {\r\n                handleServerNetworkError(error, dispatch)\r\n\r\n            })\r\n    }\r\n}\r\n\r\n// types\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>;\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>;\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>;\r\nexport type ChangeTodolistEntityStatusActionType = ReturnType<typeof changeTodolistEntityStatusAC>\r\n\r\ntype ActionsType =\r\n    | RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ReturnType<typeof changeTodolistTitleAC>\r\n    | ReturnType<typeof changeTodolistFilterAC>\r\n    | SetTodolistsActionType\r\n    | SetAppStatusActionType\r\n    | ChangeTodolistEntityStatusActionType\r\n\r\ntype ThunkDispatch = Dispatch<ActionsType | SetAppErrorActionType | SetAppStatusActionType>\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\n","D:\\HP\\JS\\project\\Todolist_\\src\\features\\TodolistsList\\TodolistsList.tsx",["90","91","92","93","94","95","96","97"],"D:\\HP\\JS\\project\\Todolist_\\src\\api\\todolists-api.ts",[],"D:\\HP\\JS\\project\\Todolist_\\src\\components\\AddItemForm\\AddItemForm.tsx",["98","99","100"],"import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {Box, Button, FormControl, IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function({addItem, disabled = false }: AddItemFormPropsType) {\r\n    console.log(\"AddItemForm called\")\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== \"\") {\r\n            addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItemHandler();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n                   size=\"small\"\r\n                   disabled={disabled}\r\n        />\r\n        <IconButton color=\"default\" onClick={addItemHandler} disabled={disabled}>\r\n            <AddBox />\r\n        </IconButton>\r\n    </div>\r\n})\r\n","D:\\HP\\JS\\project\\Todolist_\\src\\features\\TodolistsList\\Todolist\\Todolist.tsx",["101","102","103","104","105","106","107"],"import React, { useCallback, useEffect } from 'react'\r\nimport { AddItemForm } from '../../../components/AddItemForm/AddItemForm'\r\nimport { EditableSpan } from '../../../components/EditableSpan/EditableSpan'\r\nimport { IconButton } from '@material-ui/core'\r\nimport Button from '@mui/material/Button';\r\nimport { Delete } from '@material-ui/icons'\r\nimport { Task } from './Task/Task'\r\nimport { TaskStatuses, TaskType } from '../../../api/todolists-api'\r\nimport { FilterValuesType } from '../todolists-reducer'\r\nimport { useDispatch } from 'react-redux'\r\nimport { fetchTasksTC } from '../tasks-reducer'\r\nimport PlaylistRemoveIcon from '@mui/icons-material/PlaylistRemove';\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    filter: FilterValuesType\r\n\r\n}\r\n\r\nexport const Todolist = React.memo(function (props: PropsType) {\r\n    console.log('Todolist called')\r\n\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        const thunk = fetchTasksTC(props.id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.id)\r\n    }, [props.addTask, props.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.id, title)\r\n    }, [props.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.id), [props.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.id), [props.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.id), [props.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.title} onChange={changeTodolistTitle} />\r\n            <IconButton onClick={removeTodolist}>\r\n                <PlaylistRemoveIcon />\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} />\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.id}\r\n                    removeTask={props.removeTask}\r\n                    changeTaskTitle={props.changeTaskTitle}\r\n                    changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{ paddingTop: '10px' }}>\r\n            <Button variant={props.filter === 'all' ? 'outlined' : 'text'}\r\n                onClick={onAllClickHandler}\r\n                color={'inherit'}\r\n                size=\"small\">All\r\n            </Button>\r\n            <Button variant={props.filter === 'active' ? 'outlined' : 'text'}\r\n                onClick={onActiveClickHandler}\r\n                color={'primary'}\r\n                size=\"small\">Active\r\n            </Button>\r\n            <Button variant={props.filter === 'completed' ? 'outlined' : 'text'}\r\n                onClick={onCompletedClickHandler}\r\n                color={'secondary'}\r\n                size=\"small\">Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n",["108","109"],"D:\\HP\\JS\\project\\Todolist_\\src\\features\\TodolistsList\\Todolist\\Task\\Task.tsx",["110","111","112"],"import React, {ChangeEvent, useCallback} from 'react'\r\nimport {IconButton} from '@material-ui/core'\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"secondary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler} size=\"small\">\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","D:\\HP\\JS\\project\\Todolist_\\src\\components\\EditableSpan\\EditableSpan.tsx",[],"D:\\HP\\JS\\project\\Todolist_\\src\\features\\TodolistsList\\Todolist\\TodoList.tsx",["113","114","115","116","117","118","119"],"import React, { useCallback, useEffect } from 'react'\r\nimport { AddItemForm } from '../../../components/AddItemForm/AddItemForm'\r\nimport { EditableSpan } from '../../../components/EditableSpan/EditableSpan'\r\nimport { IconButton } from '@material-ui/core'\r\nimport Button from '@mui/material/Button';\r\nimport { Delete } from '@material-ui/icons'\r\nimport { Task } from './Task/Task'\r\nimport { TaskStatuses, TaskType } from '../../../api/todolists-api'\r\nimport { FilterValuesType, TodolistDomainType } from '../todolists-reducer'\r\nimport { useDispatch } from 'react-redux'\r\nimport { fetchTasksTC } from '../tasks-reducer'\r\nimport PlaylistRemoveIcon from '@mui/icons-material/PlaylistRemove';\r\nimport { RequestStatusType } from '../../../app/app-reducer';\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    entityStatus: RequestStatusType\r\n\r\n}\r\n\r\nexport const Todolist = React.memo(function (props: PropsType) {\r\n    console.log('Todolist called')\r\n\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        const thunk = fetchTasksTC(props.todolist.id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.todolist.id)\r\n    }, [props.addTask, props.todolist.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.todolist.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.todolist.id, title)\r\n    }, [props.todolist.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.todolist.title} onChange={changeTodolistTitle} />\r\n            <IconButton onClick={removeTodolist} disabled={props.todolist.entityStatus === 'loading'}>\r\n                <PlaylistRemoveIcon />\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus === 'loading'} />\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.todolist.id}\r\n                    removeTask={props.removeTask}\r\n                    changeTaskTitle={props.changeTaskTitle}\r\n                    changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{ paddingTop: '10px' }}>\r\n            <Button variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                onClick={onAllClickHandler}\r\n                color={'inherit'}\r\n                size=\"small\">All\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                onClick={onActiveClickHandler}\r\n                color={'primary'}\r\n                size=\"small\">Active\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                onClick={onCompletedClickHandler}\r\n                color={'secondary'}\r\n                size=\"small\">Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","D:\\HP\\JS\\project\\Todolist_\\src\\app\\app-reducer.ts",[],"D:\\HP\\JS\\project\\Todolist_\\src\\components\\ErrorSnackbar\\ErrorSnackbar.tsx",["120","121"],"import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, { AlertProps } from '@material-ui/lab/Alert'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { AppRootStateType } from './../../app/store'\r\nimport { setAppErrorAC } from './../../app/app-reducer'\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n    const [open, setOpen] = React.useState(true)\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        dispatch(setAppErrorAC(null))\r\n    }\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={3000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\" >\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}","D:\\HP\\JS\\project\\Todolist_\\src\\utils\\error-utils.ts",[],"D:\\HP\\JS\\project\\Todolist_\\src\\features\\login\\Login.tsx",["122","123"],"D:\\HP\\JS\\project\\Todolist_\\src\\features\\login\\auth-reducer.ts",["124"],"import { authAPI } from './../../api/todolists-api';\r\nimport { Dispatch } from 'redux'\r\nimport { SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType } from '../../app/app-reducer'\r\nimport { LoginParamsType, todolistsAPI } from '../../api/todolists-api'\r\nimport { handleServerAppError, handleServerNetworkError } from '../../utils/error-utils';\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const authReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'login/SET-IS-LOGGED-IN':\r\n            return { ...state, isLoggedIn: action.value }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n// actions\r\nexport const setIsLoggedInAC = (value: boolean) => ({ type: 'login/SET-IS-LOGGED-IN', value } as const)\r\n// thunks\r\nexport const loginTC = (data: LoginParamsType) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.login(data)\r\n    .then(res => {\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setIsLoggedInAC(true))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n        }\r\n    }).catch((error) => {\r\n        handleServerNetworkError(error, dispatch)\r\n    })\r\n}\r\n \r\n// types\r\ntype ActionsType = ReturnType<typeof setIsLoggedInAC> | SetAppStatusActionType | SetAppErrorActionType",{"ruleId":"125","replacedBy":"126"},{"ruleId":"127","replacedBy":"128"},{"ruleId":"129","severity":1,"message":"130","line":8,"column":10,"nodeType":"131","messageId":"132","endLine":8,"endColumn":21},{"ruleId":"129","severity":1,"message":"133","line":5,"column":26,"nodeType":"131","messageId":"132","endLine":5,"endColumn":39},{"ruleId":"129","severity":1,"message":"133","line":3,"column":69,"nodeType":"131","messageId":"132","endLine":3,"endColumn":82},{"ruleId":"134","severity":1,"message":"135","line":28,"column":8,"nodeType":"136","endLine":28,"endColumn":10,"suggestions":"137"},{"ruleId":"134","severity":1,"message":"138","line":33,"column":8,"nodeType":"136","endLine":33,"endColumn":10,"suggestions":"139"},{"ruleId":"134","severity":1,"message":"138","line":38,"column":8,"nodeType":"136","endLine":38,"endColumn":10,"suggestions":"140"},{"ruleId":"134","severity":1,"message":"138","line":43,"column":8,"nodeType":"136","endLine":43,"endColumn":10,"suggestions":"141"},{"ruleId":"134","severity":1,"message":"138","line":48,"column":8,"nodeType":"136","endLine":48,"endColumn":10,"suggestions":"142"},{"ruleId":"134","severity":1,"message":"138","line":53,"column":8,"nodeType":"136","endLine":53,"endColumn":10,"suggestions":"143"},{"ruleId":"134","severity":1,"message":"138","line":58,"column":8,"nodeType":"136","endLine":58,"endColumn":10,"suggestions":"144"},{"ruleId":"134","severity":1,"message":"138","line":63,"column":8,"nodeType":"136","endLine":63,"endColumn":10,"suggestions":"145"},{"ruleId":"129","severity":1,"message":"146","line":2,"column":9,"nodeType":"131","messageId":"132","endLine":2,"endColumn":12},{"ruleId":"129","severity":1,"message":"147","line":2,"column":14,"nodeType":"131","messageId":"132","endLine":2,"endColumn":20},{"ruleId":"129","severity":1,"message":"148","line":2,"column":22,"nodeType":"131","messageId":"132","endLine":2,"endColumn":33},{"ruleId":"129","severity":1,"message":"149","line":6,"column":10,"nodeType":"131","messageId":"132","endLine":6,"endColumn":16},{"ruleId":"134","severity":1,"message":"150","line":36,"column":8,"nodeType":"136","endLine":36,"endColumn":10,"suggestions":"151"},{"ruleId":"134","severity":1,"message":"152","line":40,"column":8,"nodeType":"136","endLine":40,"endColumn":33,"suggestions":"153"},{"ruleId":"134","severity":1,"message":"152","line":47,"column":8,"nodeType":"136","endLine":47,"endColumn":45,"suggestions":"154"},{"ruleId":"134","severity":1,"message":"152","line":49,"column":86,"nodeType":"136","endLine":49,"endColumn":116,"suggestions":"155"},{"ruleId":"134","severity":1,"message":"152","line":50,"column":92,"nodeType":"136","endLine":50,"endColumn":122,"suggestions":"156"},{"ruleId":"134","severity":1,"message":"152","line":51,"column":98,"nodeType":"136","endLine":51,"endColumn":128,"suggestions":"157"},{"ruleId":"125","replacedBy":"158"},{"ruleId":"127","replacedBy":"159"},{"ruleId":"134","severity":1,"message":"152","line":16,"column":97,"nodeType":"136","endLine":16,"endColumn":130,"suggestions":"160"},{"ruleId":"134","severity":1,"message":"152","line":21,"column":8,"nodeType":"136","endLine":21,"endColumn":41,"suggestions":"161"},{"ruleId":"134","severity":1,"message":"152","line":25,"column":8,"nodeType":"136","endLine":25,"endColumn":41,"suggestions":"162"},{"ruleId":"129","severity":1,"message":"149","line":6,"column":10,"nodeType":"131","messageId":"132","endLine":6,"endColumn":16},{"ruleId":"134","severity":1,"message":"163","line":36,"column":8,"nodeType":"136","endLine":36,"endColumn":10,"suggestions":"164"},{"ruleId":"134","severity":1,"message":"152","line":40,"column":8,"nodeType":"136","endLine":40,"endColumn":42,"suggestions":"165"},{"ruleId":"134","severity":1,"message":"152","line":47,"column":8,"nodeType":"136","endLine":47,"endColumn":54,"suggestions":"166"},{"ruleId":"134","severity":1,"message":"152","line":49,"column":95,"nodeType":"136","endLine":49,"endColumn":134,"suggestions":"167"},{"ruleId":"134","severity":1,"message":"152","line":50,"column":101,"nodeType":"136","endLine":50,"endColumn":140,"suggestions":"168"},{"ruleId":"134","severity":1,"message":"152","line":51,"column":107,"nodeType":"136","endLine":51,"endColumn":146,"suggestions":"169"},{"ruleId":"129","severity":1,"message":"170","line":13,"column":12,"nodeType":"131","messageId":"132","endLine":13,"endColumn":16},{"ruleId":"129","severity":1,"message":"171","line":13,"column":18,"nodeType":"131","messageId":"132","endLine":13,"endColumn":25},{"ruleId":"172","severity":2,"message":"173","line":31,"column":20,"nodeType":"131","endLine":31,"endColumn":29},{"ruleId":"174","severity":1,"message":"175","line":66,"column":29,"nodeType":"176","messageId":"177","endLine":67,"endColumn":51,"fix":"178"},{"ruleId":"129","severity":1,"message":"179","line":4,"column":27,"nodeType":"131","messageId":"132","endLine":4,"endColumn":39},"no-native-reassign",["180"],"no-negated-in-lhs",["181"],"@typescript-eslint/no-unused-vars","'useDispatch' is defined but never used.","Identifier","unusedVar","'setAppErrorAC' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["182"],"React Hook useCallback has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["183"],["184"],["185"],["186"],["187"],["188"],["189"],"'Box' is defined but never used.","'Button' is defined but never used.","'FormControl' is defined but never used.","'Delete' is defined but never used.","React Hook useEffect has missing dependencies: 'dispatch' and 'props.id'. Either include them or remove the dependency array.",["190"],"React Hook useCallback has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useCallback call and refer to those specific props inside useCallback.",["191"],["192"],["193"],["194"],["195"],["180"],["181"],["196"],["197"],["198"],"React Hook useEffect has missing dependencies: 'dispatch' and 'props.todolist.id'. Either include them or remove the dependency array.",["199"],["200"],["201"],["202"],["203"],["204"],"'open' is assigned a value but never used.","'setOpen' is assigned a value but never used.","react-hooks/rules-of-hooks","React Hook \"useFormik\" is called conditionally. React Hooks must be called in the exact same order in every component render.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" (which implies rel=\"noopener\") is a security risk in older browsers: see https://mathiasbynens.github.io/rel-noopener/#recommendations","JSXOpeningElement","noTargetBlankWithoutNoreferrer",{"range":"205","text":"206"},"'todolistsAPI' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"207","fix":"208"},{"desc":"207","fix":"209"},{"desc":"207","fix":"210"},{"desc":"207","fix":"211"},{"desc":"207","fix":"212"},{"desc":"207","fix":"213"},{"desc":"207","fix":"214"},{"desc":"207","fix":"215"},{"desc":"216","fix":"217"},{"desc":"218","fix":"219"},{"desc":"218","fix":"220"},{"desc":"218","fix":"221"},{"desc":"218","fix":"222"},{"desc":"218","fix":"223"},{"desc":"218","fix":"224"},{"desc":"218","fix":"225"},{"desc":"218","fix":"226"},{"desc":"227","fix":"228"},{"desc":"218","fix":"229"},{"desc":"218","fix":"230"},{"desc":"218","fix":"231"},{"desc":"218","fix":"232"},{"desc":"218","fix":"233"},[2248,2248]," rel=\"noreferrer\"","Update the dependencies array to be: [dispatch]",{"range":"234","text":"235"},{"range":"236","text":"235"},{"range":"237","text":"235"},{"range":"238","text":"235"},{"range":"239","text":"235"},{"range":"240","text":"235"},{"range":"241","text":"235"},{"range":"242","text":"235"},"Update the dependencies array to be: [dispatch, props.id]",{"range":"243","text":"244"},"Update the dependencies array to be: [props]",{"range":"245","text":"246"},{"range":"247","text":"246"},{"range":"248","text":"246"},{"range":"249","text":"246"},{"range":"250","text":"246"},{"range":"251","text":"246"},{"range":"252","text":"246"},{"range":"253","text":"246"},"Update the dependencies array to be: [dispatch, props.todolist.id]",{"range":"254","text":"255"},{"range":"256","text":"246"},{"range":"257","text":"246"},{"range":"258","text":"246"},{"range":"259","text":"246"},{"range":"260","text":"246"},[1096,1098],"[dispatch]",[1267,1269],[1438,1440],[1643,1645],[1856,1858],[2057,2059],[2204,2206],[2383,2385],[1503,1505],"[dispatch, props.id]",[1611,1636],"[props]",[1849,1886],[1976,2006],[2100,2130],[2230,2260],[803,836],[1109,1142],[1299,1332],[1601,1603],"[dispatch, props.todolist.id]",[1718,1752],[1983,2029],[2128,2167],[2270,2309],[2418,2457]]